Parameters:
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the GylEC2Main instance
    Type: AWS::EC2::KeyPair::KeyName
  GylVersion:
    Description: GYL Version
    Type: String
  LambdaBucketName:
    Description: Lambda Bucket
    Type: String
  ApiAuthKeyHash:
    Description: Key for authorizing API requests
    Type: String
  DbTablePrefix:
    Description: Prefix for DynamoDB tables
    Type: String
  SesSourceEmail:
    Description: Source email used by SES
    Type: String
  AdminEmail:
    Description: Email to receive errors and other GYL operating information
    Type: String
  QueueUserAccessKeyId:
    Description: The id of the access key used by GYL Queue system
    Type: String
  QueueUserSecretAccessKey:
    Description: The secret access key used by GYL Queue system
    Type: String
  BroadcastUserAccessKeyId:
    Description: The id of the access key used by GYL Broadcast system
    Type: String
  BroadcastUserSecretAccessKey:
    Description: The secret access key used by GYL Broadcast system
    Type: String

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-062f7200baf2fa504
    us-east-2:
      AMI: ami-02ccb28830b645a41
    us-west-1:
      AMI: ami-03caa3f860895f82e
    us-west-2:
      AMI: ami-04590e7389a6e577c
    sa-east-1:
      AMI: ami-09de7b4017733e2af
    eu-north-1:
      AMI: ami-0662eb9b9b8685935
    eu-west-3:
      AMI: ami-007fae589fdf6e955
    eu-west-2:
      AMI: ami-0089b31e09ac3fffc
    eu-west-1:
      AMI: ami-0713f98de93617bb4
    eu-central-1:
      AMI: ami-07cda0db070313c52
    ca-central-1:
      AMI: ami-0a269ca7cc3e3beff
    ap-northeast-1:
      AMI: ami-011facbea5ec0363b
    ap-southeast-2:
      AMI: ami-0b8b10b5bf11f3a22
    ap-southeast-1:
      AMI: ami-05c64f7b4062b0a21

Resources:
  # EC2
  GylEC2Main:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref GylEC2MainSecurityGroup
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      BlockDeviceMappings:
        - DeviceName: '/dev/xvda'
          Ebs:
            VolumeType: 'gp2'
            VolumeSize: '8'
            DeleteOnTermination: 'true'
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              # Install the files and packages from the metadata
            - '/opt/aws/bin/cfn-init -v'
            - ' --stack '
            - !Ref 'AWS::StackName'
            - ' --resource GylEC2Main'
            - ' --region '
            - !Ref 'AWS::Region'
            - ' --configsets installGylDependencies'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          installGylDependencies:
            - installGylDependencies
        installGylDependencies:
          files:
            '/tmp/gyl-queue.env':
              encoding: plain
              mode: '000644'
              owner: root
              group: root
              content: !Sub
                - |
                  SOURCE_EMAIL=${SourceEmail}
                  FALLBACK_SOURCE_EMAIL=${FallbackSourceEmail}
                  UNSUBSCRIBE_LINK_TEMPLATE=${UnsubscribeLinkTemplate}
                  DB_TABLE_PREFIX="${DbPrefix}"
                  AWS_REGION="${AwsRegion}"
                  AWS_ACCESS_KEY_ID=${AwsAccessKeyId}
                  AWS_SECRET_ACCESS_KEY=${AwsSecretAccessKey}

                -
                  SourceEmail: !Ref SesSourceEmail
                  FallbackSourceEmail: !Ref SesSourceEmail
                  UnsubscribeLinkTemplate: 'test'
                  DbPrefix: !Ref DbTablePrefix
                  AwsRegion: !Ref AWS::Region
                  AwsAccessKeyId: !Ref QueueUserAccessKeyId
                  AwsSecretAccessKey: !Ref QueueUserSecretAccessKey

            '/tmp/gyl-broadcaster.env':
              encoding: plain
              mode: '000644'
              owner: root
              group: root
              content: !Sub
                - |
                  DB_TABLE_PREFIX="${DbPrefix}"
                  AWS_REGION="${AwsRegion}"
                  AWS_ACCESS_KEY_ID=${AwsAccessKeyId}
                  AWS_SECRET_ACCESS_KEY=${AwsSecretAccessKey}

                - 
                  DbPrefix: !Ref DbTablePrefix
                  AwsRegion: !Ref AWS::Region
                  AwsAccessKeyId: !Ref BroadcastUserAccessKeyId
                  AwsSecretAccessKey: !Ref BroadcastUserSecretAccessKey

            '/etc/systemd/system/gyl-queue.service':
              encoding: plain
              mode: '000644'
              owner: root
              group: root
              content: |
                [Unit]
                Description=Grow Your List Queue Service

                [Service]
                ExecStart=/usr/bin/node src/gyl-queue.js
                WorkingDirectory=/var/growyourlist/gyl-queue
                Restart=always
                SyslogIdentifier=GYL-Queue
                User=ec2-user
                Group=ec2-user
                Environment=PATH=/usr/bin:/usr/local/bin
                Environment=NODE_ENV=production

                [Install]
                WantedBy=multi-user.target

            '/etc/systemd/system/gyl-broadcaster.service':
              encoding: plain
              mode: '000644'
              owner: root
              group: root
              content: |
                [Unit]
                Description=Grow Your List Broadcaster Service

                [Service]
                ExecStart=/usr/bin/node src/gyl-check-for-broadcast-trigger.js
                WorkingDirectory=/var/growyourlist/gyl-broadcaster
                Restart=always
                SyslogIdentifier=GYL-Broadcaster
                User=ec2-user
                Group=ec2-user
                Environment=PATH=/usr/bin:/usr/local/bin
                Environment=NODE_ENV=production

                [Install]
                WantedBy=multi-user.target

            '/etc/systemd/system/gyl-subscriber-count.service':
              encoding: plain
              mode: '000644'
              owner: root
              group: root
              content: |
                [Unit]
                Description=Grow Your List Subscriber Count Service

                [Service]
                ExecStart=/usr/bin/node src/gyl-check-for-subscriber-count-trigger.js
                WorkingDirectory=/var/growyourlist/gyl-broadcaster
                Restart=always
                SyslogIdentifier=GYL-Subscriber-Count
                User=ec2-user
                Group=ec2-user
                Environment=PATH=/usr/bin:/usr/local/bin
                Environment=NODE_ENV=production

                [Install]
                WantedBy=multi-user.target

            '/tmp/gyl-install-dependencies.sh':
              encoding: plain
              mode: '000644'
              owner: root
              group: root
              content: |
                #!/bin/bash
                # Update packages
                sudo yum update -y

                # Install Node
                curl -sL https://rpm.nodesource.com/setup_12.x | sudo bash -
                sudo yum install -y nodejs
                sudo yum install -y gcc-c++ make

                # Install Yarn
                curl -sL https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo
                sudo yum install -y yarn

                # Install Git
                sudo yum install -y git

                # Install GYL Queue
                mkdir /var/growyourlist
                git clone https://github.com/growyourlist/gyl-queue /var/growyourlist/gyl-queue
                cd /var/growyourlist/gyl-queue
                yarn install -y

                # Install GYL Broadcaster
                git clone https://github.com/growyourlist/gyl-broadcaster /var/growyourlist/gyl-broadcaster
                cd /var/growyourlist/gyl-broadcaster
                yarn install -y

            '/tmp/gyl-mv-env-files.sh':
              encoding: plain
              mode: '000644'
              owner: root
              group: root
              content: |
                #!/bin/bash
                touch /tmp/attempted-mv
                mv /tmp/gyl-queue.env /var/growyourlist/gyl-queue/.env
                mv /tmp/gyl-broadcaster.env /var/growyourlist/gyl-broadcaster/.env

            '/tmp/gyl-enable-services.sh':
              encoding: plain
              mode: '000644'
              owner: root
              group: root
              content: |
                #!/bin/bash
                systemctl enable gyl-queue
                systemctl enable gyl-broadcaster
                systemctl enable gyl-subscriber-count
                systemctl start gyl-queue
                systemctl start gyl-broadcaster
                systemctl start gyl-subscriber-count

          commands:
            runGyl001:
              command: 'sh /tmp/gyl-install-dependencies.sh'
            runGyl002:
              command: 'sh /tmp/gyl-mv-env-files.sh'
            runGyl003:
              command: 'sh /tmp/gyl-enable-services.sh'

  GylEC2MainSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Enable SSH access via port 22
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: 0.0.0.0/0

  # Public API Meta
  GylPublicApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: 'GrowYourList Public API'
      Description: 'API to interact with public functions of the GrowYourList mailing list system.'
      EndpointConfiguration:
        Types:
          - REGIONAL
  GylPublicApiBetaStage:
    Type: AWS::ApiGateway::Stage
    DependsOn:
      - GylPublicApiDeployment
    Properties:
      DeploymentId: !Ref GylPublicApiDeployment
      RestApiId: !Ref GylPublicApi
      StageName: beta
  GylPublicApiCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        -
          PolicyName: GylPublicApiCloudWatchPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Resource: '*'
  GylPublicApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GylPublicApiSubscriberUnsubscribeGet
      - GylPublicApiSubscriberUnsubscribePost
      - GylPublicApiSubscriberConfirmGet
    Properties:
      RestApiId:
        Ref: GylPublicApi
  GylPublicApiEmptyModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Description: This is a default empty schema model
      Name: GylPublicApiEmptyModel
      RestApiId:
        Ref: GylPublicApi
      Schema: !Join
        - ''
        - - '{'
          - '"$schema":"http://json-schema.org/draft-04/schema#",'
          - '"title":"Empty Schema",'
          - '"type":"object",'
          - '"definitions":{}'
          - '}'

  ### BEGIN PUBLIC API GENERATED PART
  GylPublicApiSubscriberResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylPublicApi
      ParentId: !GetAtt
        - GylPublicApi
        - RootResourceId
      PathPart: subscriber
  GylSubscriberConfirmGetLambdaRole:
    Type: AWS::IAM::Role
    DependsOn:
      - GylSubscribersTable
      - GylSettingsTable
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylSubscriberConfirmGetLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylSubscriberConfirmGet:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource:
                  - !GetAtt
                    - GylSubscribersTable
                    - Arn
              -
                Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt
                    - GylSubscribersTable
                    - Arn
              -
                Effect: Allow
                Action:
                  - dynamodb:Settings
                Resource:
                  - !GetAtt
                    - GylSettingsTable
                    - Arn
  GylSubscriberConfirmGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-public-subscriber-confirm-get-dist.zip
      Description: Confirms a subscriber in response to link click
      FunctionName: GylSubscriberConfirmGet
      Handler: index.handler
      Role: !GetAtt
        - GylSubscriberConfirmGetLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylSubscriberConfirmGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylSubscriberConfirmGetLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylPublicApi
          - '/*'
  GylPublicApiSubscriberConfirmGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylSubscriberConfirmGetPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylPublicApiSubscriberConfirmResource
      RestApiId:
        Ref: GylPublicApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylSubscriberConfirmGetLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylPublicApiSubscriberConfirmOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylPublicApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylPublicApiSubscriberConfirmResource
      RestApiId:
        Ref: GylPublicApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylPublicApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'GET,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylPublicApiSubscriberConfirmResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylPublicApi
      ParentId: !Ref GylPublicApiSubscriberResource
      PathPart: confirm
  GylSubscriberUnsubscribeGetLambdaRole:
    Type: AWS::IAM::Role
    DependsOn:
      - GylSubscribersTable
      - GylSettingsTable
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylSubscriberUnsubscribeGetLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylSubscriberUnsubscribeGet:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !GetAtt
                        - GylSubscribersTable
                        - Arn
                      - /index/EmailToStatusIndex
              -
                Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt
                    - GylSubscribersTable
                    - Arn
              -
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource:
                  - !GetAtt
                    - GylSettingsTable
                    - Arn
  GylSubscriberUnsubscribeGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-public-subscriber-unsubscribe-get-dist.zip
      Description: Gets a public unsubscribe request
      FunctionName: GylSubscriberUnsubscribeGet
      Handler: index.handler
      Role: !GetAtt
        - GylSubscriberUnsubscribeGetLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylSubscriberUnsubscribeGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylSubscriberUnsubscribeGetLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylPublicApi
          - '/*'
  GylPublicApiSubscriberUnsubscribeGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylSubscriberUnsubscribeGetPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylPublicApiSubscriberUnsubscribeResource
      RestApiId:
        Ref: GylPublicApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylSubscriberUnsubscribeGetLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylSubscriberUnsubscribePostLambdaRole:
    Type: AWS::IAM::Role
    DependsOn:
      - GylSubscribersTable
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylSubscriberUnsubscribePostLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylSubscriberUnsubscribePost:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !GetAtt
                        - GylSubscribersTable
                        - Arn
                      - /index/EmailToStatusIndex
              -
                Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt
                    - GylSubscribersTable
                    - Arn
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !GetAtt
                        - GylQueueTable
                        - Arn
                      - /index/SubscriberIdIndex
              -
                Effect: Allow
                Action:
                  - dynamodb:BatchWriteItem
                Resource:
                  - !GetAtt
                    - GylQueueTable
                    - Arn
  GylSubscriberUnsubscribePostLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-public-subscriber-unsubscribe-post-dist.zip
      Description: Posts a public unsubscribe request
      FunctionName: GylSubscriberUnsubscribePost
      Handler: index.handler
      Role: !GetAtt
        - GylSubscriberUnsubscribePostLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylSubscriberUnsubscribePostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylSubscriberUnsubscribePostLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylPublicApi
          - '/*'
  GylPublicApiSubscriberUnsubscribePost:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylSubscriberUnsubscribePostPermission
    Properties:
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylPublicApiSubscriberUnsubscribeResource
      RestApiId:
        Ref: GylPublicApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylSubscriberUnsubscribePostLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylPublicApiSubscriberUnsubscribeOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylPublicApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylPublicApiSubscriberUnsubscribeResource
      RestApiId:
        Ref: GylPublicApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylPublicApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'GET,POST,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylPublicApiSubscriberUnsubscribeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylPublicApi
      ParentId: !Ref GylPublicApiSubscriberResource
      PathPart: unsubscribe
  ### END PUBLIC API GENERATED PART

  # Admin API Meta
  GylAdminApiAuthorizerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-api-authorizer-dist.zip
      Description: Authorizes requests to the GYL API
      FunctionName: GylAdminApiAuthorizer
      Handler: index.authorizer
      Runtime: nodejs12.x
      Role: !GetAtt
        - GylBasicLambdaRole
        - Arn
      Environment:
        Variables:
          ApiAuthKeyHash: !Ref ApiAuthKeyHash
  GylInvokeApiAuthorizerRole:
    Type: AWS::IAM::Role
    DependsOn:
      - GylAdminApiAuthorizerLambda
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylInvokeApiAuthorizerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt
                  - GylAdminApiAuthorizerLambda
                  - Arn
  GylAdminApiAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    DependsOn:
      - GylAdminApiAuthorizerLambda
    Properties:
      Name: GylAdminApiAuthorizer
      RestApiId:
        Ref: GylAdminApi
      Type: REQUEST
      AuthorizerUri: !Join
        - ''
        - - 'arn:aws:apigateway:'
          - !Ref 'AWS::Region'
          - ':lambda:path/2015-03-31/functions/'
          - !GetAtt
            - GylAdminApiAuthorizerLambda
            - Arn
          - /invocations
      IdentitySource: method.request.header.X-Gyl-Auth-Key
      Name: GylAdminApiAuthorizer
      AuthorizerResultTtlInSeconds: 60
      AuthorizerCredentials: !GetAtt
        - GylInvokeApiAuthorizerRole
        - Arn
  GylAdminApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: 'GrowYourList Admin API'
      Description: 'API to interact with the admin functions of the GrowYourList mailing list system'
      EndpointConfiguration:
        Types:
          - REGIONAL
  GylAdminApiBetaStage:
    Type: AWS::ApiGateway::Stage
    DependsOn:
      - GylAdminApiDeployment
    Properties:
      DeploymentId: !Ref GylAdminApiDeployment
      RestApiId: !Ref GylAdminApi
      StageName: beta
  GylAdminApiCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        -
          PolicyName: GylAdminApiCloudWatchPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Resource: '*'
  GylAdminApiAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt
        - GylAdminApiCloudWatchLogsRole
        - Arn
  GylAdminApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GylAdminApiPingGet
      - GylAdminApiAuthPingGet
      - GylAdminApiAdminAutoresponderGet
      - GylAdminApiAdminAnalyticsGet
      - GylAdminApiAdminAutoresponderPost
      - GylAdminApiAdminAutoresponderDelete
      - GylAdminApiAdminAutorespondersGet
      - GylAdminApiAdminBroadcastPost
      - GylAdminApiAdminEmailHistoryGet
      - GylAdminApiAdminListPost
      - GylAdminApiAdminListsGet
      - GylAdminApiAdminSingleEmailSendPost
      - GylAdminApiAdminSubscriberPost
      - GylAdminApiAdminSubscriberDelete
      - GylAdminApiAdminSubscriberQueueGet
      - GylAdminApiAdminSubscriberStatusGet
      - GylAdminApiAdminSubscriberTagPost
      - GylAdminApiAdminSubscriberUntagPost
      - GylAdminApiAdminSubscriberUnsubscribePost
      - GylAdminApiAdminSubscriberCountPost
      - GylAdminApiAdminTemplatePost
      - GylAdminApiAdminTemplateGet
      - GylAdminApiAdminTemplateDelete
      - GylAdminApiAdminTemplatesGet
    Properties:
      RestApiId:
        Ref: GylAdminApi
  GylAdminApiEmptyModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Description: This is a default empty schema model
      Name: GylAdminApiEmptyModel
      RestApiId:
        Ref: GylAdminApi
      Schema: !Join
        - ''
        - - '{'
          - '"$schema":"http://json-schema.org/draft-04/schema#",'
          - '"title":"Empty Schema",'
          - '"type":"object",'
          - '"definitions":{}'
          - '}'

  # API Lambda integrations
  GylBasicLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ## Api Ping
  GylPingLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Join
         - ''
         - - 'exports.handler=async e=>('
           - '{statusCode:200,body:JSON.stringify("OK"),headers:{'
           - "'Access-Control-Allow-Origin':'*'"
           - '}}'
           - ')'
      Description: Returns 200 OK
      FunctionName: GylPingLambda
      Handler: index.handler
      Role: !GetAtt
        - GylBasicLambdaRole
        - Arn
      Runtime: nodejs12.x
  GylPingPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylPingLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiPingResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !GetAtt
        - GylAdminApi
        - RootResourceId
      PathPart: ping
  GylAdminApiPingOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiPingResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'GET,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiPingGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylPingPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiPingResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylPingLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"

  ## Api Auth Ping
  GylAdminApiAuthPingResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !GetAtt
        - GylAdminApi
        - RootResourceId
      PathPart: auth-ping
  GylAdminApiAuthPingOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAuthPingResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'GET,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAuthPingGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylPingPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAuthPingResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylPingLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"

  ## Api admin resource
  GylAdminApiAdminResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !GetAtt
        - GylAdminApi
        - RootResourceId
      PathPart: admin

  ### BEGIN ADMIN API GENERATED PART
  GylAdminApiAdminResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !GetAtt
        - GylAdminApi
        - RootResourceId
      PathPart: admin
  GylAdminAnalyticsGetLambdaRole:
    Type: AWS::IAM::Role
    DependsOn:
      - GylQueueTable
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminAnalyticsGetLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminAnalyticsGet:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !GetAtt
                    - GylQueueTable
                    - Arn
  GylAdminAnalyticsGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-analytics-get-dist.zip
      Description: Gets email analytics
      FunctionName: GylAdminAnalyticsGet
      Handler: index.handler
      Role: !GetAtt
        - GylAdminAnalyticsGetLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminAnalyticsGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminAnalyticsGetLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminAnalyticsGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminAnalyticsGetPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminAnalyticsResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminAnalyticsGetLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminAnalyticsOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminAnalyticsResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'GET,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminAnalyticsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminResource
      PathPart: analytics
  GylAdminAutoresponderPostLambdaRole:
    Type: AWS::IAM::Role
    DependsOn:
      - GylSettingsTable
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminAutoresponderPostLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminAutoresponderPost:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource:
                  - !GetAtt
                    - GylSettingsTable
                    - Arn
  GylAdminAutoresponderPostLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-autoresponder-post-dist.zip
      Description: Posts (creates or updates) an autoresponder
      FunctionName: GylAdminAutoresponderPost
      Handler: index.handler
      Role: !GetAtt
        - GylAdminAutoresponderPostLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminAutoresponderPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminAutoresponderPostLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminAutoresponderPost:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminAutoresponderPostPermission
    Properties:
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminAutoresponderResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminAutoresponderPostLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminAutoresponderGetLambdaRole:
    Type: AWS::IAM::Role
    DependsOn:
      - GylSettingsTable 
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminAutoresponderGetLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminAutoresponderGet:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource:
                  - !GetAtt
                    - GylSettingsTable
                    - Arn
  GylAdminAutoresponderGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-autoresponder-get-dist.zip
      Description: Gets an autoresponder
      FunctionName: GylAdminAutoresponderGet
      Handler: index.handler
      Role: !GetAtt
        - GylAdminAutoresponderGetLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminAutoresponderGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminAutoresponderGetLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminAutoresponderGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminAutoresponderGetPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminAutoresponderResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminAutoresponderGetLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminAutoresponderDeleteLambdaRole:
    Type: AWS::IAM::Role
    DependsOn:
      - GylSettingsTable
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminAutoresponderDeleteLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminAutoresponderDelete:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:DeleteItem
                Resource:
                  - !GetAtt
                    - GylSettingsTable
                    - Arn
  GylAdminAutoresponderDeleteLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-autoresponder-delete-dist.zip
      Description: Deletes an autoresponder
      FunctionName: GylAdminAutoresponderDelete
      Handler: index.handler
      Role: !GetAtt
        - GylAdminAutoresponderDeleteLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminAutoresponderDeletePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminAutoresponderDeleteLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminAutoresponderDelete:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminAutoresponderDeletePermission
    Properties:
      HttpMethod: DELETE
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminAutoresponderResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminAutoresponderDeleteLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminAutoresponderOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminAutoresponderResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'POST,GET,DELETE,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminAutoresponderResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminResource
      PathPart: autoresponder
  GylAdminAutorespondersGetLambdaRole:
    Type: AWS::IAM::Role
    DependsOn:
      - GylSettingsTable 
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminAutorespondersGetLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminAutorespondersGet:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:Scan
                Resource:
                  - !GetAtt
                    - GylSettingsTable
                    - Arn
  GylAdminAutorespondersGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-autoresponders-get-dist.zip
      Description: Gets a list of autoresponders
      FunctionName: GylAdminAutorespondersGet
      Handler: index.handler
      Role: !GetAtt
        - GylAdminAutorespondersGetLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminAutorespondersGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminAutorespondersGetLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminAutorespondersGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminAutorespondersGetPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminAutorespondersResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminAutorespondersGetLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminAutorespondersOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminAutorespondersResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'GET,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminAutorespondersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminResource
      PathPart: autoresponders
  GylAdminBroadcastPostLambdaRole:
    Type: AWS::IAM::Role
    DependsOn:
      - GylSettingsTable
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminBroadcastPostLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminBroadcastPost:*'
              -
                Effect: Allow
                Action:
                  - ses:GetTemplate
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                Resource:
                  - !GetAtt
                    - GylSettingsTable
                    - Arn
  GylAdminBroadcastPostLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-broadcast-post-dist.zip
      Description: Triggers a broadcast
      FunctionName: GylAdminBroadcastPost
      Handler: index.handler
      Role: !GetAtt
        - GylAdminBroadcastPostLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminBroadcastPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminBroadcastPostLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminBroadcastPost:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminBroadcastPostPermission
    Properties:
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminBroadcastResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminBroadcastPostLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminBroadcastOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminBroadcastResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'POST,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminBroadcastResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminResource
      PathPart: broadcast
  GylAdminEmailHistoryGetLambdaRole:
    Type: AWS::IAM::Role
    DependsOn:
      - GylSettingsTable
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminEmailHistoryGetLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminEmailHistoryGet:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource:
                  - !GetAtt
                    - GylSettingsTable
                    - Arn
  GylAdminEmailHistoryGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-email-history-get-dist.zip
      Description: Gets the history of sent emails
      FunctionName: GylAdminEmailHistoryGet
      Handler: index.handler
      Role: !GetAtt
        - GylAdminEmailHistoryGetLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminEmailHistoryGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminEmailHistoryGetLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminEmailHistoryGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminEmailHistoryGetPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminEmailHistoryResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminEmailHistoryGetLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminEmailHistoryOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminEmailHistoryResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'GET,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminEmailHistoryResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminResource
      PathPart: email-history
  GylAdminListPostLambdaRole:
    Type: AWS::IAM::Role
    DependsOn:
      - GylSettingsTable
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminListPostLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminListPost:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                Resource:
                  - !GetAtt
                    - GylSettingsTable
                    - Arn
  GylAdminListPostLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-list-post-dist.zip
      Description: Posts a info about a new list
      FunctionName: GylAdminListPost
      Handler: index.handler
      Role: !GetAtt
        - GylAdminListPostLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminListPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminListPostLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminListPost:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminListPostPermission
    Properties:
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminListResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminListPostLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminListDeleteLambdaRole:
    Type: AWS::IAM::Role
    DependsOn:
      - GylSettingsTable
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminListDeleteLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminListDelete:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                Resource:
                  - !GetAtt
                    - GylSettingsTable
                    - Arn
  GylAdminListDeleteLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-list-delete-dist.zip
      Description: Deletes info about a list
      FunctionName: GylAdminListDelete
      Handler: index.handler
      Role: !GetAtt
        - GylAdminListDeleteLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminListDeletePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminListDeleteLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminListDelete:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminListDeletePermission
    Properties:
      HttpMethod: DELETE
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminListResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminListDeleteLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminListOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminListResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'POST,DELETE,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminListResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminResource
      PathPart: list
  GylAdminListsGetLambdaRole:
    Type: AWS::IAM::Role
    DependsOn:
      - GylSettingsTable
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminListsGetLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminListsGet:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource:
                  - !GetAtt
                    - GylSettingsTable
                    - Arn
  GylAdminListsGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-lists-get-dist.zip
      Description: Gets the list of mailing lists
      FunctionName: GylAdminListsGet
      Handler: index.handler
      Role: !GetAtt
        - GylAdminListsGetLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminListsGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminListsGetLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminListsGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminListsGetPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminListsResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminListsGetLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminListsOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminListsResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'GET,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminListsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminResource
      PathPart: lists
  GylAdminPostalAddressGetLambdaRole:
    Type: AWS::IAM::Role
    DependsOn:
      - GylSettingsTable
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminPostalAddressGetLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminPostalAddressGet:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource:
                  - !GetAtt
                    - GylSettingsTable
                    - Arn
  GylAdminPostalAddressGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-postal-address-get-dist.zip
      Description: 
      FunctionName: GylAdminPostalAddressGet
      Handler: index.handler
      Role: !GetAtt
        - GylAdminPostalAddressGetLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminPostalAddressGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminPostalAddressGetLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminPostalAddressGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminPostalAddressGetPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminPostalAddressResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminPostalAddressGetLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminPostalAddressOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminPostalAddressResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'GET,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminPostalAddressResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminResource
      PathPart: postal-address
  GylAdminSingleEmailSendPostLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminSingleEmailSendPostLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminSingleEmailSendPost:*'
              -
                Effect: Allow
                Action:
                  - ses:SendEmail
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !GetAtt
                        - GylSubscribersTable
                        - Arn
                      - /index/EmailToStatusIndex
              -
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                Resource:
                  - !GetAtt
                    - GylSubscribersTable
                    - Arn
              -
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource:
                  - !GetAtt
                    - GylQueueTable
                    - Arn
  GylAdminSingleEmailSendPostLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-single-email-send-post-dist.zip
      Description: Sends a single email using given text and/or html
      FunctionName: GylAdminSingleEmailSendPost
      Handler: index.handler
      Role: !GetAtt
        - GylAdminSingleEmailSendPostLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          SOURCE_EMAIL_ADDRESS: !Ref SesSourceEmail
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminSingleEmailSendPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminSingleEmailSendPostLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminSingleEmailSendPost:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminSingleEmailSendPostPermission
    Properties:
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSingleEmailSendResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminSingleEmailSendPostLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSingleEmailSendOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSingleEmailSendResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'POST,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSingleEmailSendResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminResource
      PathPart: single-email-send
  GylAdminSubscriberGetLambdaRole:
    Type: AWS::IAM::Role
    DependsOn:
      - GylSubscribersTable
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminSubscriberGetLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminSubscriberGet:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !GetAtt
                        - GylSubscribersTable
                        - Arn
                      - /index/EmailToStatusIndex
              -
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource:
                  - !GetAtt
                    - GylSubscribersTable
                    - Arn
  GylAdminSubscriberGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-subscriber-get-dist.zip
      Description: Gets the full subscriber
      FunctionName: GylAdminSubscriberGet
      Handler: index.handler
      Role: !GetAtt
        - GylAdminSubscriberGetLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminSubscriberGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminSubscriberGetLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminSubscriberGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminSubscriberGetPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminSubscriberGetLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminSubscriberPostLambdaRole:
    Type: AWS::IAM::Role
    DependsOn:
      - GylSubscribersTable
      - GylQueueTable
      - GylSettingsTable
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminSubscriberPostLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminSubscriberPost:*'
              -
                Effect: Allow
                Action:
                  - ses:SendTemplatedEmail
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !GetAtt
                        - GylSubscribersTable
                        - Arn
                      - /index/EmailToStatusIndex
              -
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                Resource:
                  - !GetAtt
                    - GylSubscribersTable
                    - Arn
              -
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource:
                  - !GetAtt
                    - GylSettingsTable
                    - Arn
              -
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                Resource:
                  - !GetAtt
                    - GylQueueTable
                    - Arn
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !GetAtt
                        - GylQueueTable
                        - Arn
                      - /index/SubscriberIdIndex
  GylAdminSubscriberPostLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-subscriber-post-dist.zip
      Description: Posts (create or update if email exists) a subscriber
      FunctionName: GylAdminSubscriberPost
      Handler: index.handler
      Role: !GetAtt
        - GylAdminSubscriberPostLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
          SOURCE_EMAIL: !Ref SesSourceEmail
  GylAdminSubscriberPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminSubscriberPostLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminSubscriberPost:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminSubscriberPostPermission
    Properties:
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminSubscriberPostLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminSubscriberDeleteLambdaRole:
    Type: AWS::IAM::Role
    DependsOn:
      - GylSubscribersTable
      - GylQueueTable
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminSubscriberDeleteLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminSubscriberDelete:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !GetAtt
                        - GylSubscribersTable
                        - Arn
                      - /index/EmailToStatusIndex
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !GetAtt
                        - GylQueueTable
                        - Arn
                      - /index/SubscriberIdIndex
              -
                Effect: Allow
                Action:
                  - dynamodb:BatchWriteItem
                Resource:
                  - !GetAtt
                    - GylQueueTable
                    - Arn
              -
                Effect: Allow
                Action:
                  - dynamodb:DeleteItem
                Resource:
                  - !GetAtt
                    - GylSubscribersTable
                    - Arn
  GylAdminSubscriberDeleteLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-subscriber-delete-dist.zip
      Description: Deletes a subscriber
      FunctionName: GylAdminSubscriberDelete
      Handler: index.handler
      Role: !GetAtt
        - GylAdminSubscriberDeleteLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminSubscriberDeletePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminSubscriberDeleteLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminSubscriberDelete:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminSubscriberDeletePermission
    Properties:
      HttpMethod: DELETE
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminSubscriberDeleteLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscriberOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'GET,POST,DELETE,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscriberResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminResource
      PathPart: subscriber
  GylAdminSubscriberQueueGetLambdaRole:
    Type: AWS::IAM::Role
    DependsOn:
      - GylSubscribersTable
      - GylQueueTable
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminSubscriberQueueGetLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminSubscriberQueueGet:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !GetAtt
                        - GylSubscribersTable
                        - Arn
                      - /index/EmailToStatusIndex
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !GetAtt
                        - GylQueueTable
                        - Arn
                      - /index/SubscriberIdIndex
              -
                Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                Resource:
                  - !GetAtt
                    - GylQueueTable
                    - Arn
  GylAdminSubscriberQueueGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-subscriber-queue-get-dist.zip
      Description: Gets a subscribers queued items
      FunctionName: GylAdminSubscriberQueueGet
      Handler: index.handler
      Role: !GetAtt
        - GylAdminSubscriberQueueGetLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminSubscriberQueueGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminSubscriberQueueGetLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminSubscriberQueueGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminSubscriberQueueGetPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberQueueResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminSubscriberQueueGetLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscriberQueueOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberQueueResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'GET,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscriberQueueResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminSubscriberResource
      PathPart: queue
  GylAdminSubscriberStatusGetLambdaRole:
    Type: AWS::IAM::Role
    DependsOn:
      - GylSubscribersTable
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminSubscriberStatusGetLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminSubscriberStatusGet:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !GetAtt
                        - GylSubscribersTable
                        - Arn
                      - /index/EmailToStatusIndex
  GylAdminSubscriberStatusGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-subscriber-status-get-dist.zip
      Description: Gets the status of a subscriber (subscriberId, email, unsubscribed, confirmed, tags)
      FunctionName: GylAdminSubscriberStatusGet
      Handler: index.handler
      Role: !GetAtt
        - GylAdminSubscriberStatusGetLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminSubscriberStatusGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminSubscriberStatusGetLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminSubscriberStatusGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminSubscriberStatusGetPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberStatusResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminSubscriberStatusGetLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscriberStatusOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberStatusResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'GET,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscriberStatusResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminSubscriberResource
      PathPart: status
  GylAdminSubscriberTagPostLambdaRole:
    Type: AWS::IAM::Role
    DependsOn:
      - GylSubscribersTable
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminSubscriberTagPostLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminSubscriberTagPost:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !GetAtt
                        - GylSubscribersTable
                        - Arn
                      - /index/EmailToStatusIndex
              -
                Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt
                    - GylSubscribersTable
                    - Arn
  GylAdminSubscriberTagPostLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-subscriber-tag-post-dist.zip
      Description: Adds a tag to a subscriber.
      FunctionName: GylAdminSubscriberTagPost
      Handler: index.handler
      Role: !GetAtt
        - GylAdminSubscriberTagPostLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminSubscriberTagPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminSubscriberTagPostLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminSubscriberTagPost:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminSubscriberTagPostPermission
    Properties:
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberTagResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminSubscriberTagPostLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscriberTagOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberTagResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'POST,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscriberTagResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminSubscriberResource
      PathPart: tag
  GylAdminSubscriberUntagPostLambdaRole:
    Type: AWS::IAM::Role
    DependsOn:
      - GylSubscribersTable
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminSubscriberUntagPostLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminSubscriberUntagPost:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !GetAtt
                        - GylSubscribersTable
                        - Arn
                      - /index/EmailToStatusIndex
              -
                Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt
                    - GylSubscribersTable
                    - Arn
  GylAdminSubscriberUntagPostLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-subscriber-untag-post-dist.zip
      Description: Removes a tag from a subscriber.
      FunctionName: GylAdminSubscriberUntagPost
      Handler: index.handler
      Role: !GetAtt
        - GylAdminSubscriberUntagPostLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminSubscriberUntagPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminSubscriberUntagPostLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminSubscriberUntagPost:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminSubscriberUntagPostPermission
    Properties:
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberUntagResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminSubscriberUntagPostLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscriberUntagOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberUntagResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'POST,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscriberUntagResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminSubscriberResource
      PathPart: untag
  GylAdminSubscriberUnsubscribePostLambdaRole:
    Type: AWS::IAM::Role
    DependsOn:
      - GylSubscribersTable
      - GylQueueTable
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminSubscriberUnsubscribePostLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminSubscriberUnsubscribePost:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !GetAtt
                        - GylSubscribersTable
                        - Arn
                      - /index/EmailToStatusIndex
              -
                Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt
                    - GylSubscribersTable
                    - Arn
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !GetAtt
                        - GylQueueTable
                        - Arn
                      - /index/SubscriberIdIndex
              -
                Effect: Allow
                Action:
                  - dynamodb:BatchWriteItem
                Resource:
                  - !GetAtt
                    - GylQueueTable
                    - Arn
  GylAdminSubscriberUnsubscribePostLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-subscriber-unsubscribe-post-dist.zip
      Description: Unsubscribes a subscriber
      FunctionName: GylAdminSubscriberUnsubscribePost
      Handler: index.handler
      Role: !GetAtt
        - GylAdminSubscriberUnsubscribePostLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminSubscriberUnsubscribePostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminSubscriberUnsubscribePostLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminSubscriberUnsubscribePost:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminSubscriberUnsubscribePostPermission
    Properties:
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberUnsubscribeResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminSubscriberUnsubscribePostLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscriberUnsubscribeOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberUnsubscribeResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'POST,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscriberUnsubscribeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminSubscriberResource
      PathPart: unsubscribe
  GylAdminSubscribersPostLambdaRole:
    Type: AWS::IAM::Role
    DependsOn:
      - GylSubscribersTable
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminSubscribersPostLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminSubscribersPost:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !GetAtt
                        - GylSubscribersTable
                        - Arn
                      - /index/EmailToStatusIndex
              -
                Effect: Allow
                Action:
                  - dynamodb:BatchWriteItem
                Resource:
                  - !GetAtt
                    - GylSubscribersTable
                    - Arn
  GylAdminSubscribersPostLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-subscribers-post-dist.zip
      Description: Posts multiple subscribers (between 1 and 25 subscribers inclusive)
      FunctionName: GylAdminSubscribersPost
      Handler: index.handler
      Role: !GetAtt
        - GylAdminSubscribersPostLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminSubscribersPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminSubscribersPostLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminSubscribersPost:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminSubscribersPostPermission
    Properties:
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscribersResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminSubscribersPostLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscribersOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscribersResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'POST,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscribersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminResource
      PathPart: subscribers
  GylAdminSubscriberCountPostLambdaRole:
    Type: AWS::IAM::Role
    DependsOn:
      - GylSettingsTable
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminSubscriberCountPostLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminSubscriberCountPost:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource:
                  - !GetAtt
                    - GylSettingsTable
                    - Arn
  GylAdminSubscriberCountPostLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-subscriber-count-post-dist.zip
      Description: Triggers a count of subscribers
      FunctionName: GylAdminSubscriberCountPost
      Handler: index.handler
      Role: !GetAtt
        - GylAdminSubscriberCountPostLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminSubscriberCountPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminSubscriberCountPostLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminSubscriberCountPost:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminSubscriberCountPostPermission
    Properties:
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberCountResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminSubscriberCountPostLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminSubscriberCountGetLambdaRole:
    Type: AWS::IAM::Role
    DependsOn:
      - GylSettingsTable
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminSubscriberCountGetLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminSubscriberCountGet:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource:
                  - !GetAtt
                    - GylSettingsTable
                    - Arn
  GylAdminSubscriberCountGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-subscriber-count-get-dist.zip
      Description: Gets the status of the subscriber count
      FunctionName: GylAdminSubscriberCountGet
      Handler: index.handler
      Role: !GetAtt
        - GylAdminSubscriberCountGetLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminSubscriberCountGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminSubscriberCountGetLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminSubscriberCountGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminSubscriberCountGetPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberCountResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminSubscriberCountGetLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscriberCountOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberCountResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'POST,GET,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscriberCountResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminResource
      PathPart: subscriber-count
  GylAdminTemplatePostLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminTemplatePostLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminTemplatePost:*'
              -
                Effect: Allow
                Action:
                  - ses:CreateTemplate
                  - ses:UpdateTemplate
                Resource: '*'
  GylAdminTemplatePostLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-template-post-dist.zip
      Description: Posts (creates or updates) an email template.
      FunctionName: GylAdminTemplatePost
      Handler: index.handler
      Role: !GetAtt
        - GylAdminTemplatePostLambdaRole
        - Arn
      Runtime: nodejs12.x
  GylAdminTemplatePostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminTemplatePostLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminTemplatePost:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminTemplatePostPermission
    Properties:
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminTemplateResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminTemplatePostLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminTemplateGetLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminTemplateGetLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminTemplateGet:*'
              -
                Effect: Allow
                Action:
                  - ses:GetTemplate
                Resource: '*'
  GylAdminTemplateGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-template-get-dist.zip
      Description: Gets an email template.
      FunctionName: GylAdminTemplateGet
      Handler: index.handler
      Role: !GetAtt
        - GylAdminTemplateGetLambdaRole
        - Arn
      Runtime: nodejs12.x
  GylAdminTemplateGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminTemplateGetLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminTemplateGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminTemplateGetPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminTemplateResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminTemplateGetLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminTemplateDeleteLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminTemplateDeleteLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminTemplateDelete:*'
              -
                Effect: Allow
                Action:
                  - ses:DeleteTemplate
                Resource: '*'
  GylAdminTemplateDeleteLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-template-delete-dist.zip
      Description: Deletes an email template.
      FunctionName: GylAdminTemplateDelete
      Handler: index.handler
      Role: !GetAtt
        - GylAdminTemplateDeleteLambdaRole
        - Arn
      Runtime: nodejs12.x
  GylAdminTemplateDeletePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminTemplateDeleteLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminTemplateDelete:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminTemplateDeletePermission
    Properties:
      HttpMethod: DELETE
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminTemplateResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminTemplateDeleteLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminTemplateOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminTemplateResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'POST,GET,DELETE,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminTemplateResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminResource
      PathPart: template
  GylAdminTemplatesGetLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminTemplatesGetLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminTemplatesGet:*'
              -
                Effect: Allow
                Action:
                  - ses:ListTemplates
                Resource: '*'
  GylAdminTemplatesGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-templates-get-dist.zip
      Description: Gets a list of meta info about templates.
      FunctionName: GylAdminTemplatesGet
      Handler: index.handler
      Role: !GetAtt
        - GylAdminTemplatesGetLambdaRole
        - Arn
      Runtime: nodejs12.x
  GylAdminTemplatesGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminTemplatesGetLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminTemplatesGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminTemplatesGetPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminTemplatesResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminTemplatesGetLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminTemplatesOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminTemplatesResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'GET,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminTemplatesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminResource
      PathPart: templates
  ### END ADMIN API GENERATED PART

  # SNS Lambda Functions
  GylReactToInteractionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylReactToInteractionLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !GetAtt
                        - GylSubscribersTable
                        - Arn
                      - /index/EmailToStatusIndex
              -
                Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                Resource: !GetAtt
                  - GylSubscribersTable
                  - Arn
              -
                Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                Resource: !GetAtt
                  - GylQueueTable
                  - Arn
  GylReactToInteractionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-react-to-interaction-dist.zip
      Description: Lambda function to react to interactions with emails.
      FunctionName: GylReactToInteraction
      Handler: index.handler
      Role: !GetAtt
        - GylReactToInteractionLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylReactToInteractionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylReactToInteractionLambda
        - Arn
      Principal: sns.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:sns:'
          -
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          - GylOpenAndClickTopic

  GylReactToUnsubscribeEventLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylReactToUnsubscribeEventLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !GetAtt
                        - GylSubscribersTable
                        - Arn
                      - /index/EmailToStatusIndex
              -
                Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                Resource: !GetAtt
                  - GylSubscribersTable
                  - Arn
              - 
                Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:BatchWriteItem
                Resource: !GetAtt
                  - GylQueueTable
                  - Arn
  GylReactToUnsubscribeEventLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-react-to-unsubscribe-event-dist.zip
      Description: Lambda function to react to unsubscribe events.
      FunctionName: GylReactToUnsubscribeEventLambda
      Handler: index.handler
      Role: !GetAtt
        - GylReactToUnsubscribeEventLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylReactToUnsubscribeEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylReactToUnsubscribeEventLambda
        - Arn
      Principal: sns.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:sns:'
          -
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          - GylUnsubscribeEventTopic

  # DynamoDB Tables
  GylSettingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        -
          AttributeName: settingName
          AttributeType: S
      TableName: !Sub
        - '${DbTablePrefix}Settings'
        - 
          DbTablePrefix: !Ref DbTablePrefix
      KeySchema:
        -
          AttributeName: settingName
          KeyType: HASH
  GylQueueTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableName: !Sub
        - '${DbTablePrefix}Queue'
        - 
          DbTablePrefix: !Ref DbTablePrefix
      AttributeDefinitions:
        -
          AttributeName: queuePlacement
          AttributeType: S
        -
          AttributeName: runAtModified
          AttributeType: S
        -
          AttributeName: subscriberId
          AttributeType: S
      KeySchema:
        -
          AttributeName: queuePlacement
          KeyType: HASH
        -
          AttributeName: runAtModified
          KeyType: RANGE
      GlobalSecondaryIndexes:
        -
          IndexName: SubscriberIdIndex
          KeySchema:
            -
              AttributeName: subscriberId
              KeyType: HASH
          Projection:
            NonKeyAttributes:
              - tagReason
            ProjectionType: INCLUDE
  GylSubscribersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableName: !Sub
        - '${DbTablePrefix}Subscribers'
        - 
          DbTablePrefix: !Ref DbTablePrefix
      AttributeDefinitions:
        -
          AttributeName: subscriberId
          AttributeType: S
        -
          AttributeName: email
          AttributeType: S
      KeySchema:
        -
          AttributeName: subscriberId
          KeyType: HASH
      GlobalSecondaryIndexes:
        -
          IndexName: EmailToStatusIndex
          KeySchema:
            -
              AttributeName: email
              KeyType: HASH
          Projection:
            NonKeyAttributes:
              - unsubscribed
              - confirmed
              - tags
              - unsubscribeToken
            ProjectionType: INCLUDE

  # SNS
  GylOpenAndClickTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        -
          Endpoint: !GetAtt
            - GylReactToInteractionLambda
            - Arn
          Protocol: lambda
      TopicName: GylOpenAndClickTopic
  GylUnsubscribeEventTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        -
          Endpoint: !GetAtt
            - GylReactToUnsubscribeEventLambda
            - Arn
          Protocol: lambda
      TopicName: GylUnsubscribeEventTopic
  GylSesFailureEventTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        -
          Endpoint: !Ref AdminEmail
          Protocol: email
      TopicName: GylSesFailureEventTopic

  # SES
  GylSesConfigurationSet:
    Type: AWS::SES::ConfigurationSet
    Properties:
      Name: GylSesConfigurationSet

Outputs:
  GylEC2MainHostname:
    Description: 'EC2 Hostname'
    Value: !Join
      - ''
      - - !GetAtt
          - GylEC2Main
          - PublicDnsName
  GylAdminApiUrl:
    Description: 'GYL API Url'
    Value: !Join
      - ''
      - - https://
        -
          Ref: GylAdminApi
        - .execute-api.
        -
          Ref: AWS::Region
        - .amazonaws.com/
  GylAdminApiBetaStage:
    Description: 'GYL API Stage'
    Value: !Ref GylAdminApiBetaStage
  GylSesConfigurationSet:
    Description: GylSesConfigurationSet
    Value: !Ref GylSesConfigurationSet
  GylOpenAndClickTopic:
    Description: GylOpenAndClickTopic
    Value: !Ref GylOpenAndClickTopic
  GylUnsubscribeEventTopic:
    Description: GylUnsubscribeEventTopic
    Value: !Ref GylUnsubscribeEventTopic
  GylSesFailureEventTopic:
    Description: GylSesFailureEventTopic
    Value: !Ref GylSesFailureEventTopic
