Parameters:
  LambdaBucketName:
    Description: Lambda Bucket
    Type: String
  ApiAuthKeyHash:
    Description: Key for authorizing API requests
    Type: String
  DbTablePrefix:
    Description: Prefix for DynamoDB tables
    Type: String
  SesSourceEmail:
    Description: Source email used by SES
    Type: String
  GylSettingsTableArn:
    Description: Arn of the Settings DynamoDB table
    Type: String
  GylSubscribersTableArn:
    Description: Arn of the Subscribers DynamoDB table
    Type: String
  GylQueueTableArn:
    Description: Arn of the Queue DynamoDB table
    Type: String
  GylTemplateHistoryTableArn:
    Description: Arn of the Template History table
    Type: String
  GylAutoresponderHistoryTableArn:
    Description: Arn of the Autoresponder History table
    Type: String
  GylBroadcastQueueTableArn:
    Description: Arn of the Broadcast Queue table
    Type: String
  GylReactToInteractionLambdaArn:
    Description: Arn of the React to Interaction lambda
    Type: String

Resources:
  # Admin API Meta
  GylBasicLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  GylAdminApiAuthorizerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-api-authorizer-dist.zip
      Description: Authorizes requests to the GYL API
      FunctionName: GylAdminApiAuthorizer
      Handler: index.authorizer
      Runtime: nodejs12.x
      Role: !GetAtt
        - GylBasicLambdaRole
        - Arn
      Environment:
        Variables:
          ApiAuthKeyHash: !Ref ApiAuthKeyHash
  GylInvokeApiAuthorizerRole:
    Type: AWS::IAM::Role
    DependsOn:
      - GylAdminApiAuthorizerLambda
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylInvokeApiAuthorizerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt
                  - GylAdminApiAuthorizerLambda
                  - Arn
  GylAdminApiAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    DependsOn:
      - GylAdminApiAuthorizerLambda
    Properties:
      Name: GylAdminApiAuthorizer
      RestApiId:
        Ref: GylAdminApi
      Type: REQUEST
      AuthorizerUri: !Join
        - ''
        - - 'arn:aws:apigateway:'
          - !Ref 'AWS::Region'
          - ':lambda:path/2015-03-31/functions/'
          - !GetAtt
            - GylAdminApiAuthorizerLambda
            - Arn
          - /invocations
      IdentitySource: method.request.header.X-Gyl-Auth-Key
      Name: GylAdminApiAuthorizer
      AuthorizerResultTtlInSeconds: 60
      AuthorizerCredentials: !GetAtt
        - GylInvokeApiAuthorizerRole
        - Arn
  GylAdminApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: 'GrowYourList Admin API'
      Description: 'API to interact with the admin functions of the GrowYourList mailing list system'
      EndpointConfiguration:
        Types:
          - REGIONAL
  GylAdminApiBetaStage:
    Type: AWS::ApiGateway::Stage
    DependsOn:
      - GylAdminApiDeployment
    Properties:
      DeploymentId: !Ref GylAdminApiDeployment
      RestApiId: !Ref GylAdminApi
      StageName: beta
  GylAdminApiCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        -
          PolicyName: GylAdminApiCloudWatchPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Resource: '*'
  GylAdminApiAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt
        - GylAdminApiCloudWatchLogsRole
        - Arn
  GylAdminApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GylAdminApiPingGet
      - GylAdminApiAuthPingGet
      - GylAdminApiAdminAutoresponderGet
      - GylAdminApiAdminAnalyticsGet
      - GylAdminApiAdminAutoConfirmTagsGet
      - GylAdminApiAdminAutoConfirmTagsPost
      - GylAdminApiAdminAutoresponderPost
      - GylAdminApiAdminAutoresponderDelete
      - GylAdminApiAdminAutorespondersGet
      - GylAdminApiAdminBroadcastPost
      - GylAdminApiAdminEmailHistoryGet
      - GylAdminApiAdminListPost
      - GylAdminApiAdminListsGet
      - GylAdminApiAdminSingleEmailSendPost
      - GylAdminApiAdminSubscriberPost
      - GylAdminApiAdminSubscriberDelete
      - GylAdminApiAdminSubscriberQueueGet
      - GylAdminApiAdminSubscriberStatusGet
      - GylAdminApiAdminSubscriberTagPost
      - GylAdminApiAdminSubscriberUntagPost
      - GylAdminApiAdminSubscriberUnsubscribePost
      - GylAdminApiAdminSubscriberCountPost
      - GylAdminApiAdminTemplatePost
      - GylAdminApiAdminTemplateGet
      - GylAdminApiAdminTemplateDelete
      - GylAdminApiAdminTemplatesGet
    Properties:
      RestApiId:
        Ref: GylAdminApi
  GylAdminApiEmptyModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Description: This is a default empty schema model
      Name: GylAdminApiEmptyModel
      RestApiId:
        Ref: GylAdminApi
      Schema: !Join
        - ''
        - - '{'
          - '"$schema":"http://json-schema.org/draft-04/schema#",'
          - '"title":"Empty Schema",'
          - '"type":"object",'
          - '"definitions":{}'
          - '}'

  ## Api Ping
  GylPingLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Join
         - ''
         - - 'exports.handler=async e=>('
           - '{statusCode:200,body:JSON.stringify("OK"),headers:{'
           - "'Access-Control-Allow-Origin':'*'"
           - '}}'
           - ')'
      Description: Returns 200 OK
      FunctionName: GylPingLambda
      Handler: index.handler
      Role: !GetAtt
        - GylBasicLambdaRole
        - Arn
      Runtime: nodejs12.x
  GylPingPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylPingLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiPingResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !GetAtt
        - GylAdminApi
        - RootResourceId
      PathPart: ping
  GylAdminApiPingOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiPingResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'GET,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiPingGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylPingPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiPingResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylPingLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"

  ## Api Auth Ping
  GylAdminApiAuthPingResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !GetAtt
        - GylAdminApi
        - RootResourceId
      PathPart: auth-ping
  GylAdminApiAuthPingOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAuthPingResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'GET,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAuthPingGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylPingPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAuthPingResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylPingLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"

  ### BEGIN ADMIN API GENERATED PART
  GylAdminApiAdminResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !GetAtt
        - GylAdminApi
        - RootResourceId
      PathPart: admin
  GylAdminAnalyticsGetLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminAnalyticsGetLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminAnalyticsGet:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource: !Ref GylQueueTableArn
  GylAdminAnalyticsGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-analytics-get-dist.zip
      Description: Gets email analytics
      FunctionName: GylAdminAnalyticsGet
      Handler: index.handler
      Role: !GetAtt
        - GylAdminAnalyticsGetLambdaRole
        - Arn
      Runtime: nodejs12.x
      Timeout: 120
      MemorySize: 1024
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminAnalyticsGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminAnalyticsGetLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminAnalyticsGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminAnalyticsGetPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminAnalyticsResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminAnalyticsGetLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminAnalyticsOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminAnalyticsResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'GET,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminAnalyticsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminResource
      PathPart: analytics
  GylAdminAutoConfirmTagsPostLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminAutoConfirmTagsPostLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminAutoConfirmTagsPost:*'
              -
                Effect: Allow
                Action:
                  - lambda:UpdateFunctionConfiguration
                  - lambda:GetFunctionConfiguration
                Resource: !Ref GylReactToInteractionLambdaArn
  GylAdminAutoConfirmTagsPostLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-auto-confirm-tags-post-dist.zip
      Description: Posts (creates or updates) the list of tags that auto confirm a subscriber when added via an interaction.
      FunctionName: GylAdminAutoConfirmTagsPost
      Handler: index.handler
      Role: !GetAtt
        - GylAdminAutoConfirmTagsPostLambdaRole
        - Arn
      Runtime: nodejs12.x
  GylAdminAutoConfirmTagsPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminAutoConfirmTagsPostLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminAutoConfirmTagsPost:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminAutoConfirmTagsPostPermission
    Properties:
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminAutoConfirmTagsResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminAutoConfirmTagsPostLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminAutoConfirmTagsGetLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminAutoConfirmTagsGetLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminAutoConfirmTagsGet:*'
              -
                Effect: Allow
                Action:
                  - lambda:GetFunctionConfiguration
                Resource: !Ref GylReactToInteractionLambdaArn
  GylAdminAutoConfirmTagsGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-auto-confirm-tags-get-dist.zip
      Description: Gets the list of tags tag that auto confirm a subscriber when added via an interaction.
      FunctionName: GylAdminAutoConfirmTagsGet
      Handler: index.handler
      Role: !GetAtt
        - GylAdminAutoConfirmTagsGetLambdaRole
        - Arn
      Runtime: nodejs12.x
  GylAdminAutoConfirmTagsGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminAutoConfirmTagsGetLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminAutoConfirmTagsGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminAutoConfirmTagsGetPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminAutoConfirmTagsResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminAutoConfirmTagsGetLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminAutoConfirmTagsOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminAutoConfirmTagsResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'POST,GET,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminAutoConfirmTagsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminResource
      PathPart: auto-confirm-tags
  GylAdminAutoresponderPostLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminAutoresponderPostLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminAutoresponderPost:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !Ref GylSettingsTableArn
              -
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !Ref GylAutoresponderHistoryTableArn
  GylAdminAutoresponderPostLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-autoresponder-post-dist.zip
      Description: Posts (creates or updates) an autoresponder
      FunctionName: GylAdminAutoresponderPost
      Handler: index.handler
      Role: !GetAtt
        - GylAdminAutoresponderPostLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminAutoresponderPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminAutoresponderPostLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminAutoresponderPost:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminAutoresponderPostPermission
    Properties:
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminAutoresponderResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminAutoresponderPostLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminAutoresponderGetLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminAutoresponderGetLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminAutoresponderGet:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource: !Ref GylSettingsTableArn
  GylAdminAutoresponderGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-autoresponder-get-dist.zip
      Description: Gets an autoresponder
      FunctionName: GylAdminAutoresponderGet
      Handler: index.handler
      Role: !GetAtt
        - GylAdminAutoresponderGetLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminAutoresponderGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminAutoresponderGetLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminAutoresponderGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminAutoresponderGetPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminAutoresponderResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminAutoresponderGetLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminAutoresponderDeleteLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminAutoresponderDeleteLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminAutoresponderDelete:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:DeleteItem
                Resource: !Ref GylSettingsTableArn
  GylAdminAutoresponderDeleteLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-autoresponder-delete-dist.zip
      Description: Deletes an autoresponder
      FunctionName: GylAdminAutoresponderDelete
      Handler: index.handler
      Role: !GetAtt
        - GylAdminAutoresponderDeleteLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminAutoresponderDeletePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminAutoresponderDeleteLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminAutoresponderDelete:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminAutoresponderDeletePermission
    Properties:
      HttpMethod: DELETE
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminAutoresponderResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminAutoresponderDeleteLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminAutoresponderOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminAutoresponderResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'POST,GET,DELETE,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminAutoresponderResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminResource
      PathPart: autoresponder
  GylAdminAutorespondersGetLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminAutorespondersGetLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminAutorespondersGet:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:Scan
                Resource: !Ref GylSettingsTableArn
  GylAdminAutorespondersGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-autoresponders-get-dist.zip
      Description: Gets a list of autoresponders
      FunctionName: GylAdminAutorespondersGet
      Handler: index.handler
      Role: !GetAtt
        - GylAdminAutorespondersGetLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminAutorespondersGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminAutorespondersGetLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminAutorespondersGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminAutorespondersGetPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminAutorespondersResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminAutorespondersGetLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminAutorespondersOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminAutorespondersResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'GET,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminAutorespondersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminResource
      PathPart: autoresponders
  GylAdminBroadcastPostLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminBroadcastPostLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminBroadcastPost:*'
              -
                Effect: Allow
                Action:
                  - ses:GetTemplate
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                Resource: !Ref GylSettingsTableArn
              -
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !Ref GylBroadcastQueueTableArn
  GylAdminBroadcastPostLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-broadcast-post-dist.zip
      Description: Triggers a broadcast
      FunctionName: GylAdminBroadcastPost
      Handler: index.handler
      Role: !GetAtt
        - GylAdminBroadcastPostLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminBroadcastPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminBroadcastPostLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminBroadcastPost:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminBroadcastPostPermission
    Properties:
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminBroadcastResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminBroadcastPostLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminBroadcastOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminBroadcastResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'POST,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminBroadcastResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminResource
      PathPart: broadcast
  GylAdminEmailHistoryGetLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminEmailHistoryGetLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminEmailHistoryGet:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource: !Ref GylSettingsTableArn
  GylAdminEmailHistoryGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-email-history-get-dist.zip
      Description: Gets the history of sent emails
      FunctionName: GylAdminEmailHistoryGet
      Handler: index.handler
      Role: !GetAtt
        - GylAdminEmailHistoryGetLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminEmailHistoryGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminEmailHistoryGetLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminEmailHistoryGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminEmailHistoryGetPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminEmailHistoryResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminEmailHistoryGetLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminEmailHistoryOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminEmailHistoryResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'GET,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminEmailHistoryResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminResource
      PathPart: email-history
  GylAdminListPostLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminListPostLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminListPost:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                Resource: !Ref GylSettingsTableArn
  GylAdminListPostLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-list-post-dist.zip
      Description: Posts a info about a new list
      FunctionName: GylAdminListPost
      Handler: index.handler
      Role: !GetAtt
        - GylAdminListPostLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminListPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminListPostLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminListPost:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminListPostPermission
    Properties:
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminListResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminListPostLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminListDeleteLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminListDeleteLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminListDelete:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                Resource: !Ref GylSettingsTableArn
  GylAdminListDeleteLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-list-delete-dist.zip
      Description: Deletes info about a list
      FunctionName: GylAdminListDelete
      Handler: index.handler
      Role: !GetAtt
        - GylAdminListDeleteLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminListDeletePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminListDeleteLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminListDelete:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminListDeletePermission
    Properties:
      HttpMethod: DELETE
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminListResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminListDeleteLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminListOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminListResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'POST,DELETE,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminListResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminResource
      PathPart: list
  GylAdminListsGetLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminListsGetLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminListsGet:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource: !Ref GylSettingsTableArn
  GylAdminListsGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-lists-get-dist.zip
      Description: Gets the list of mailing lists
      FunctionName: GylAdminListsGet
      Handler: index.handler
      Role: !GetAtt
        - GylAdminListsGetLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminListsGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminListsGetLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminListsGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminListsGetPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminListsResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminListsGetLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminListsOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminListsResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'GET,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminListsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminResource
      PathPart: lists
  GylAdminPostalAddressGetLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminPostalAddressGetLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminPostalAddressGet:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource: !Ref GylSettingsTableArn
  GylAdminPostalAddressGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-postal-address-get-dist.zip
      Description: Gets the account postal address
      FunctionName: GylAdminPostalAddressGet
      Handler: index.handler
      Role: !GetAtt
        - GylAdminPostalAddressGetLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminPostalAddressGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminPostalAddressGetLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminPostalAddressGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminPostalAddressGetPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminPostalAddressResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminPostalAddressGetLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminPostalAddressOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminPostalAddressResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'GET,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminPostalAddressResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminResource
      PathPart: postal-address
  GylAdminSingleEmailSendPostLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminSingleEmailSendPostLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminSingleEmailSendPost:*'
              -
                Effect: Allow
                Action:
                  - ses:SendEmail
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !Ref GylSubscribersTableArn
                      - /index/EmailToStatusIndex
              -
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                Resource: !Ref GylSubscribersTableArn
              -
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !Ref GylQueueTableArn
  GylAdminSingleEmailSendPostLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-single-email-send-post-dist.zip
      Description: Sends a single email using given text and/or html
      FunctionName: GylAdminSingleEmailSendPost
      Handler: index.handler
      Role: !GetAtt
        - GylAdminSingleEmailSendPostLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          SOURCE_EMAIL_ADDRESS: !Ref SesSourceEmail
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminSingleEmailSendPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminSingleEmailSendPostLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminSingleEmailSendPost:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminSingleEmailSendPostPermission
    Properties:
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSingleEmailSendResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminSingleEmailSendPostLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSingleEmailSendOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSingleEmailSendResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'POST,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSingleEmailSendResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminResource
      PathPart: single-email-send
  GylAdminSubscriberGetLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminSubscriberGetLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminSubscriberGet:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !Ref GylSubscribersTableArn
                      - /index/EmailToStatusIndex
              -
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource: !Ref GylSubscribersTableArn
  GylAdminSubscriberGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-subscriber-get-dist.zip
      Description: Gets the full subscriber
      FunctionName: GylAdminSubscriberGet
      Handler: index.handler
      Role: !GetAtt
        - GylAdminSubscriberGetLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminSubscriberGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminSubscriberGetLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminSubscriberGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminSubscriberGetPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminSubscriberGetLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminSubscriberPostLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminSubscriberPostLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminSubscriberPost:*'
              -
                Effect: Allow
                Action:
                  - ses:SendTemplatedEmail
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !Ref GylSubscribersTableArn
                      - /index/EmailToStatusIndex
              -
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                Resource: !Ref GylSubscribersTableArn
              -
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource: !Ref GylSettingsTableArn
              -
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                Resource: !Ref GylQueueTableArn
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !Ref GylQueueTableArn
                      - /index/SubscriberIdIndex
  GylAdminSubscriberPostLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-subscriber-post-dist.zip
      Description: Posts (create or update if email exists) a subscriber
      FunctionName: GylAdminSubscriberPost
      Handler: index.handler
      Role: !GetAtt
        - GylAdminSubscriberPostLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
          SOURCE_EMAIL: !Ref SesSourceEmail
  GylAdminSubscriberPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminSubscriberPostLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminSubscriberPost:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminSubscriberPostPermission
    Properties:
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminSubscriberPostLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminSubscriberDeleteLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminSubscriberDeleteLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminSubscriberDelete:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !Ref GylSubscribersTableArn
                      - /index/EmailToStatusIndex
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !Ref GylQueueTableArn
                      - /index/SubscriberIdIndex
              -
                Effect: Allow
                Action:
                  - dynamodb:BatchWriteItem
                Resource: !Ref GylQueueTableArn
              -
                Effect: Allow
                Action:
                  - dynamodb:DeleteItem
                Resource: !Ref GylSubscribersTableArn
  GylAdminSubscriberDeleteLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-subscriber-delete-dist.zip
      Description: Deletes a subscriber
      FunctionName: GylAdminSubscriberDelete
      Handler: index.handler
      Role: !GetAtt
        - GylAdminSubscriberDeleteLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminSubscriberDeletePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminSubscriberDeleteLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminSubscriberDelete:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminSubscriberDeletePermission
    Properties:
      HttpMethod: DELETE
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminSubscriberDeleteLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscriberOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'GET,POST,DELETE,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscriberResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminResource
      PathPart: subscriber
  GylAdminSubscriberQueueGetLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminSubscriberQueueGetLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminSubscriberQueueGet:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !Ref GylSubscribersTableArn
                      - /index/EmailToStatusIndex
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !Ref GylQueueTableArn
                      - /index/SubscriberIdIndex
              -
                Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                Resource: !Ref GylQueueTableArn
  GylAdminSubscriberQueueGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-subscriber-queue-get-dist.zip
      Description: Gets a subscribers queued items
      FunctionName: GylAdminSubscriberQueueGet
      Handler: index.handler
      Role: !GetAtt
        - GylAdminSubscriberQueueGetLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminSubscriberQueueGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminSubscriberQueueGetLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminSubscriberQueueGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminSubscriberQueueGetPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberQueueResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminSubscriberQueueGetLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscriberQueueOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberQueueResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'GET,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscriberQueueResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminSubscriberResource
      PathPart: queue
  GylAdminSubscriberStatusGetLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminSubscriberStatusGetLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminSubscriberStatusGet:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !Ref GylSubscribersTableArn
                      - /index/EmailToStatusIndex
  GylAdminSubscriberStatusGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-subscriber-status-get-dist.zip
      Description: Gets the status of a subscriber (subscriberId, email, unsubscribed, confirmed, tags)
      FunctionName: GylAdminSubscriberStatusGet
      Handler: index.handler
      Role: !GetAtt
        - GylAdminSubscriberStatusGetLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminSubscriberStatusGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminSubscriberStatusGetLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminSubscriberStatusGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminSubscriberStatusGetPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberStatusResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminSubscriberStatusGetLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscriberStatusOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberStatusResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'GET,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscriberStatusResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminSubscriberResource
      PathPart: status
  GylAdminSubscriberTagPostLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminSubscriberTagPostLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminSubscriberTagPost:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !Ref GylSubscribersTableArn
                      - /index/EmailToStatusIndex
              -
                Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                Resource: !Ref GylSubscribersTableArn
  GylAdminSubscriberTagPostLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-subscriber-tag-post-dist.zip
      Description: Adds a tag to a subscriber.
      FunctionName: GylAdminSubscriberTagPost
      Handler: index.handler
      Role: !GetAtt
        - GylAdminSubscriberTagPostLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminSubscriberTagPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminSubscriberTagPostLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminSubscriberTagPost:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminSubscriberTagPostPermission
    Properties:
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberTagResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminSubscriberTagPostLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscriberTagOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberTagResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'POST,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscriberTagResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminSubscriberResource
      PathPart: tag
  GylAdminSubscriberUntagPostLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminSubscriberUntagPostLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminSubscriberUntagPost:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !Ref GylSubscribersTableArn
                      - /index/EmailToStatusIndex
              -
                Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                Resource: !Ref GylSubscribersTableArn
  GylAdminSubscriberUntagPostLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-subscriber-untag-post-dist.zip
      Description: Removes a tag from a subscriber.
      FunctionName: GylAdminSubscriberUntagPost
      Handler: index.handler
      Role: !GetAtt
        - GylAdminSubscriberUntagPostLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminSubscriberUntagPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminSubscriberUntagPostLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminSubscriberUntagPost:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminSubscriberUntagPostPermission
    Properties:
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberUntagResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminSubscriberUntagPostLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscriberUntagOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberUntagResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'POST,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscriberUntagResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminSubscriberResource
      PathPart: untag
  GylAdminSubscriberUnsubscribePostLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminSubscriberUnsubscribePostLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminSubscriberUnsubscribePost:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !Ref GylSubscribersTableArn
                      - /index/EmailToStatusIndex
              -
                Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                Resource: !Ref GylSubscribersTableArn
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !Ref GylQueueTableArn
                      - /index/SubscriberIdIndex
              -
                Effect: Allow
                Action:
                  - dynamodb:BatchWriteItem
                Resource: !Ref GylQueueTableArn
  GylAdminSubscriberUnsubscribePostLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-subscriber-unsubscribe-post-dist.zip
      Description: Unsubscribes a subscriber
      FunctionName: GylAdminSubscriberUnsubscribePost
      Handler: index.handler
      Role: !GetAtt
        - GylAdminSubscriberUnsubscribePostLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminSubscriberUnsubscribePostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminSubscriberUnsubscribePostLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminSubscriberUnsubscribePost:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminSubscriberUnsubscribePostPermission
    Properties:
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberUnsubscribeResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminSubscriberUnsubscribePostLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscriberUnsubscribeOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberUnsubscribeResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'POST,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscriberUnsubscribeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminSubscriberResource
      PathPart: unsubscribe
  GylAdminSubscribersPostLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminSubscribersPostLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminSubscribersPost:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !Ref GylSubscribersTableArn
                      - /index/EmailToStatusIndex
              -
                Effect: Allow
                Action:
                  - dynamodb:BatchWriteItem
                Resource: !Ref GylSubscribersTableArn
  GylAdminSubscribersPostLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-subscribers-post-dist.zip
      Description: Posts multiple subscribers (between 1 and 25 subscribers inclusive)
      FunctionName: GylAdminSubscribersPost
      Handler: index.handler
      Role: !GetAtt
        - GylAdminSubscribersPostLambdaRole
        - Arn
      Runtime: nodejs12.x
      Timeout: 15
      MemorySize: 512
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminSubscribersPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminSubscribersPostLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminSubscribersPost:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminSubscribersPostPermission
    Properties:
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscribersResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminSubscribersPostLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscribersOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscribersResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'POST,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscribersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminResource
      PathPart: subscribers
  GylAdminSubscriberCountPostLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminSubscriberCountPostLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminSubscriberCountPost:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !Ref GylSettingsTableArn
  GylAdminSubscriberCountPostLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-subscriber-count-post-dist.zip
      Description: Triggers a count of subscribers
      FunctionName: GylAdminSubscriberCountPost
      Handler: index.handler
      Role: !GetAtt
        - GylAdminSubscriberCountPostLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminSubscriberCountPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminSubscriberCountPostLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminSubscriberCountPost:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminSubscriberCountPostPermission
    Properties:
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberCountResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminSubscriberCountPostLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminSubscriberCountGetLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminSubscriberCountGetLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminSubscriberCountGet:*'
              -
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource: !Ref GylSettingsTableArn
  GylAdminSubscriberCountGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-subscriber-count-get-dist.zip
      Description: Gets the status of the subscriber count
      FunctionName: GylAdminSubscriberCountGet
      Handler: index.handler
      Role: !GetAtt
        - GylAdminSubscriberCountGetLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminSubscriberCountGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminSubscriberCountGetLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminSubscriberCountGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminSubscriberCountGetPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberCountResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminSubscriberCountGetLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscriberCountOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminSubscriberCountResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'POST,GET,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminSubscriberCountResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminResource
      PathPart: subscriber-count
  GylAdminTemplatePostLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminTemplatePostLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminTemplatePost:*'
              -
                Effect: Allow
                Action:
                  - ses:CreateTemplate
                  - ses:UpdateTemplate
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !Ref GylTemplateHistoryTableArn
  GylAdminTemplatePostLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-template-post-dist.zip
      Description: Posts (creates or updates) an email template.
      FunctionName: GylAdminTemplatePost
      Handler: index.handler
      Role: !GetAtt
        - GylAdminTemplatePostLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          DB_TABLE_PREFIX: !Ref DbTablePrefix
  GylAdminTemplatePostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminTemplatePostLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminTemplatePost:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminTemplatePostPermission
    Properties:
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminTemplateResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminTemplatePostLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminTemplateGetLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminTemplateGetLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminTemplateGet:*'
              -
                Effect: Allow
                Action:
                  - ses:GetTemplate
                Resource: '*'
  GylAdminTemplateGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-template-get-dist.zip
      Description: Gets an email template.
      FunctionName: GylAdminTemplateGet
      Handler: index.handler
      Role: !GetAtt
        - GylAdminTemplateGetLambdaRole
        - Arn
      Runtime: nodejs12.x
  GylAdminTemplateGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminTemplateGetLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminTemplateGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminTemplateGetPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminTemplateResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminTemplateGetLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminTemplateDeleteLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminTemplateDeleteLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminTemplateDelete:*'
              -
                Effect: Allow
                Action:
                  - ses:DeleteTemplate
                Resource: '*'
  GylAdminTemplateDeleteLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-template-delete-dist.zip
      Description: Deletes an email template.
      FunctionName: GylAdminTemplateDelete
      Handler: index.handler
      Role: !GetAtt
        - GylAdminTemplateDeleteLambdaRole
        - Arn
      Runtime: nodejs12.x
  GylAdminTemplateDeletePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminTemplateDeleteLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminTemplateDelete:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminTemplateDeletePermission
    Properties:
      HttpMethod: DELETE
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminTemplateResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminTemplateDeleteLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminTemplateOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminTemplateResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'POST,GET,DELETE,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminTemplateResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminResource
      PathPart: template
  GylAdminTemplatesGetLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminTemplatesGetLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminTemplatesGet:*'
              -
                Effect: Allow
                Action:
                  - ses:ListTemplates
                Resource: '*'
  GylAdminTemplatesGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-templates-get-dist.zip
      Description: Gets a list of meta info about templates.
      FunctionName: GylAdminTemplatesGet
      Handler: index.handler
      Role: !GetAtt
        - GylAdminTemplatesGetLambdaRole
        - Arn
      Runtime: nodejs12.x
  GylAdminTemplatesGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminTemplatesGetLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminTemplatesGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminTemplatesGetPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminTemplatesResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminTemplatesGetLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminTemplatesOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminTemplatesResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'GET,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminTemplatesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminResource
      PathPart: templates
  GylAdminUnsubscribeLinkGetLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: GylAdminUnsubscribeLinkGetLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':*'
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - 
                      Ref: AWS::Region
                    - ':'
                    -
                      Ref: AWS::AccountId
                    - ':log-group:/aws/lambda/GylAdminUnsubscribeLinkGet:*'
  GylAdminUnsubscribeLinkGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: gyl-admin-unsubscribe-link-get-dist.zip
      Description: Gets the unsubscribe link
      FunctionName: GylAdminUnsubscribeLinkGet
      Handler: index.handler
      Role: !GetAtt
        - GylAdminUnsubscribeLinkGetLambdaRole
        - Arn
      Runtime: nodejs12.x
  GylAdminUnsubscribeLinkGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt
        - GylAdminUnsubscribeLinkGetLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - 
            Ref: AWS::Region
          - ':'
          -
            Ref: AWS::AccountId
          - ':'
          -
            Ref: GylAdminApi
          - '/*'
  GylAdminApiAdminUnsubscribeLinkGet:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminUnsubscribeLinkGetPermission
    Properties:
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref GylAdminApiAuthorizer
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminUnsubscribeLinkResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            -
              Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            -
              !GetAtt
                - GylAdminUnsubscribeLinkGetLambda
                - Arn
            - /invocations
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminUnsubscribeLinkOptions:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - GylAdminApiEmptyModel
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      RequestParameters: {}
      ResourceId:
        Ref: GylAdminApiAdminUnsubscribeLinkResource
      RestApiId:
        Ref: GylAdminApi
      MethodResponses:
        -
          StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: GylAdminApiEmptyModel
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          -
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Gyl-Auth-Key'
              method.response.header.Access-Control-Allow-Methods: >-
                'GET,OPTIONS'
              method.response.header.Access-Control-Allow-Origin: "'*'"
  GylAdminApiAdminUnsubscribeLinkResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GylAdminApi
      ParentId: !Ref GylAdminApiAdminResource
      PathPart: unsubscribe-link
  ### END ADMIN API GENERATED PART

Outputs:
  GylAdminApi:
    Description: 'GYL Admin API'
    Value: !Ref GylAdminApi
  GylAdminApiBetaStage:
    Description: 'GYL Admin API Stage'
    Value: !Ref GylAdminApiBetaStage
